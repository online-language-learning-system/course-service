server.port=9002
server.servlet.context-path=/course-service

spring.application.name=course-service

spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_ISSUER_URI:http://identity:8080/realms/CourseRealm}

# ----- DATABASE - JPA - FLYWAY -----
spring.datasource.driverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver
spring.datasource.url=${MSSQL_DATASOURCE_URL:jdbc:sqlserver://localhost:14330};databaseName=course_db;encrypt=true;trustServerCertificate=true
spring.datasource.username=${MSSQL_SA_USERNAME:sa}
spring.datasource.password=${MSSQL_SA_PASSWORD:6$3S6zPKpJ+Y2-*J}

spring.flyway.enable=true
spring.flyway.baseline-on-migrate=false
spring.flyway.location=classpath:db/migration

# Hibernate ddl auto (none, create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.SQLServer2012Dialect

spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-request-size=5MB
spring.servlet.multipart.max-file-size=5MB

# ----- SWAGGER UI -----
springdoc.swagger-ui.path=/swagger-ui
springdoc.packagesToScan=com.hub.course_service
springdoc.swagger-ui.oauth.use-pkce-with-authorization-code-grant=true
springdoc.swagger-ui.oauth.client-id=swagger-ui
springdoc.oauthflow.authorization-url=KC:http://identity/realms/CourseRealm/protocol/openid-connect/auth
springdoc.oauthflow.token-url=${KC_TOKEN_URL:http://identity/realms/CourseRealm/protocol/openid-connect/token}



# course-service is just a Resource Server.
# It doesn't need a client in Keycloak because it doesn't fetch the token itself,
# but only validates the JWT token issued by Keycloak to a user or other service.